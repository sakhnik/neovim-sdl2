name: "release"
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build.outputs.version }}
      release: ${{ steps.build.outputs.release }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Prepare
        id: build
        run: |
          echo "::set-output name=version::$(./scripts/version.sh)"
          echo "::set-output name=release::$(./scripts/gh-release.sh)"

  windows:
    needs: [prep]
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare environment
      id: prep
      run: |
        Add-Content -Path $env:GITHUB_ENV "WORKSPACE_MSYS2=/$($env:GITHUB_WORKSPACE -replace ':?\\','/')"
        Add-Content -Path $env:GITHUB_ENV "MSYSTEM=MINGW64"
        Add-Content -Path $env:GITHUB_ENV "MSYS2_PATH_TYPE=inherit"
    - name: Install MSYS2
      run: choco install msys2
    - name: Install tools and libraries
      run: |
        .\scripts\run-sh.ps1 "install-mingw.sh"
    - name: Build
      run: |
        .\scripts\run-sh.ps1 "build.sh"
    - name: Package
      run: |
        .\scripts\run-sh.ps1 "package-nupkg.sh"
        cd dist
        choco pack
        cd ..
      env:
        NVIM_UI_VERSION: ${{ needs.prep.outputs.version }}
        NVIM_UI_RELEASE: ${{ needs.prep.outputs.release }}
    - uses: actions/upload-artifact@v2
      with:
        name: nvim-ui-nupkg
        path: dist/nvim-ui*.nupkg
        retention-days: 1

  appimage:
    needs: [prep]
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build pkg-config unzip libuv1-dev libsdl2-dev libpango1.0-dev libcairo2-dev libmsgpack-dev
    - name: Generate appimage
      run: |
        ./scripts/genappimage.sh
      env:
        NVIM_UI_VERSION: ${{ needs.prep.outputs.version }}
        NVIM_UI_RELEASE: ${{ needs.prep.outputs.release }}
    - uses: actions/upload-artifact@v2
      with:
        name: nvim-ui-appimage
        path: build/nvim-ui*.appimage
        retention-days: 1

  publish:
    needs: [prep, windows, appimage]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
    - if: github.event_name == 'workflow_dispatch'
      run: echo "TAG_NAME=latest" >> $GITHUB_ENV
    - if: github.event_name == 'push'
      run: |
        TAG_NAME=${{ github.ref }}
        echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
    - if: env.TAG_NAME == 'latest'
      run: echo 'SUBJECT=nvim-ui development (prerelease) build' >> $GITHUB_ENV
    - if: env.TAG_NAME != 'latest'
      run: echo 'SUBJECT=nvim-ui release build' >> $GITHUB_ENV
    - if: env.TAG_NAME == 'latest'
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        delete_release: true
        tag_name: latest
    - uses: meeDamian/github-release@2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ env.TAG_NAME }}
        name: ${{ needs.prep.outputs.release }}
        prerelease: ${{ env.TAG_NAME == 'latest' }}
        commitish: ${{ github.sha }}
        gzip: false
        allow_override: ${{ env.TAG_NAME == 'latest' }}
        files: |
          nvim-ui.${{ needs.prep.outputs.release }}.nupkg:nvim-ui-nupkg/nvim-ui.${{ needs.prep.outputs.release }}.nupkg
          nvim-ui.appimage:nvim-ui-appimage/nvim-ui.appimage
        body: |
          ${{ env.SUBJECT }}
          ```
          ${{ needs.prep.outputs.release }}
          ```

          ## Install

          ### Windows

          1. Install with chocolatey `choco install nvim-ui -s .`
          2. Run `nvim-ui.exe`

          ### Linux (x64)

          1. Download **nvim-ui.appimage**
          2. Run `chmod u+x nvim-ui.appimage && ./nvim-ui.appimage`
             - If your system does not have FUSE you can [extract the appimage](https://github.com/AppImage/AppImageKit/wiki/FUSE#type-2-appimage):
             ```
             ./nvim-ui.appimage --appimage-extract
             ./squashfs-root/usr/bin/nvim-ui
             ```
