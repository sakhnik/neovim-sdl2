name: "release"
on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.build.outputs.version }}
      release: ${{ steps.build.outputs.release }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Prepare
        id: build
        run: |
          echo "::set-output name=version::$(./scripts/version.sh)"
          echo "::set-output name=release::$(./scripts/gh-release.sh)"

  windows:
    needs: [prep]
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Prepare environment
      id: prep
      run: |
        Add-Content -Path $env:GITHUB_ENV "WORKSPACE_MSYS2=/$($env:GITHUB_WORKSPACE -replace ':?\\','/')"
        Add-Content -Path $env:GITHUB_ENV "MSYSTEM=MINGW64"
        Add-Content -Path $env:GITHUB_ENV "MSYS2_PATH_TYPE=inherit"
    - name: Install MSYS2
      run: choco install msys2
    - name: Install tools and libraries
      run: |
        .\scripts\run-sh.ps1 "install-mingw.sh"
    - name: Build
      run: |
        .\scripts\run-sh.ps1 "build.sh"
    - name: Package
      run: |
        .\scripts\run-sh.ps1 "package-nupkg.sh"
        cd BUILD\dist
        choco pack
        cd ..
      env:
        NVIM_UI_VERSION: ${{ needs.prep.outputs.version }}
        NVIM_UI_RELEASE: ${{ needs.prep.outputs.release }}
    - uses: actions/upload-artifact@v2
      with:
        name: nvim-ui-nupkg
        path: BUILD/dist/nvim-ui*.nupkg
        retention-days: 1

  publish:
    needs: [prep, windows]
    runs-on: ubuntu-20.04
    env:
      GH_REPO: ${{ github.repository }}
    permissions:
      contents: write
    steps:
      # Must perform checkout first, since it deletes the target directory
      # before running, and would therefore delete the downloaded artifacts
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2

      - if: github.event_name == 'workflow_dispatch'
        run: echo "TAG_NAME=latest" >> $GITHUB_ENV
      - if: github.event_name == 'push'
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
      - if: env.TAG_NAME == 'latest'
        run: echo 'SUBJECT=nvim-ui development (prerelease) build' >> $GITHUB_ENV
      - if: env.TAG_NAME != 'latest'
        run: echo 'SUBJECT=nvim-ui release build' >> $GITHUB_ENV
      - if: env.TAG_NAME == 'latest'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          (echo 'SUBJECT=nvim-ui development (prerelease) build';
           echo 'PRERELEASE=--prerelease') >> $GITHUB_ENV
          gh release delete latest --yes || true
          git push origin :latest || true
      - if: env.TAG_NAME != 'latest'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          (echo 'SUBJECT=nvim-ui release build';
           echo 'PRERELEASE=') >> $GITHUB_ENV
          gh release delete stable --yes || true
          git push origin :stable || true
      - name: Publish release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NVIM_UI_VERSION: ${{ needs.prep.outputs.version }}
          NVIM_UI_RELEASE: ${{ needs.prep.outputs.release }}
          DEBUG: api
        run: |
          envsubst < "$GITHUB_WORKSPACE/.github/workflows/notes.md" > "$RUNNER_TEMP/notes.md"
          gh release create $TAG_NAME $PRERELEASE --notes-file "$RUNNER_TEMP/notes.md" --title "$SUBJECT" --target $GITHUB_SHA nvim-ui-nupkg/*
          if [ "$TAG_NAME" != "latest" ]; then
            gh release create stable $PRERELEASE --notes-file "$RUNNER_TEMP/notes.md" --title "$SUBJECT" --target $GITHUB_SHA nvim-ui-nupkg/*
          fi
